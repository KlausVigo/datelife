dev.off()
rm(plt)
plt
pdf(file= paste0("~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/",
"mdq_plus_gdr_2018.05.29_fill.pdf"), width = 6, height = 3)
plt <- ggplot2::ggplot(res_all, ggplot2::aes_string(x = "expr", y = "Time"))
plt <- plt + ggplot2::coord_cartesian(ylim = c(y_min, y_max))
# plt <- plt + ggplot2::stat_ydensity()
# # this plots both at the same time:
plt <- plt + ggplot2::stat_ydensity(ggplot2::aes(color = tnrs, fill = tnrs), scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
# color controls the outer line color; fill control the inside color.
# plt <- plt + ggplot2::geom_violin(ggplot2::aes(fill = tnrs))  # fill = factor(tnrs) if tnrs is not a factor
plt <- plt + ggplot2::scale_color_manual(values = ggplot2::alpha(c("lightblue", "black", "grey"), 0.5)) +  # ggplot2::scale_alpha_discrete("tnrs") +
ggplot2::scale_fill_manual(values = ggplot2::alpha(c("lightblue", "black", "grey"), 0.5))
plt <- plt + ggplot2::theme(axis.text.y = ggplot2::element_text(angle=0, size=7), legend.position = "none")
plt <- plt + ggplot2::scale_y_log10(name="Time (seconds)", breaks=c(1e+03, 1e+04, 3e+04, 6e+04),
labels=c("1e+03"="1 s", "1e+04"="10 s", "3e+04"="30 s", "6e+04"="60 s"),
position="left",
sec.axis = ggplot2::sec_axis(~ . *1, name = "Time (minutes)",
breaks=c(6e+04, 18e+04, 30e+04, 6e+05, 9e+05, 15e+05),
labels=c("6e+04"="1 min", "18e+04"="3 min", "30e+04"="5 min", "6e+05"="10 min", "9e+05"="15 min", "15e+05"="25 min")
)
)
plt <- plt + ggplot2::theme(axis.text.x = ggplot2::element_text(angle=90, hjust=1, size = 7))
plt <- plt + ggplot2::scale_x_discrete(name = "Query Length",
labels=c("10" = "10",
"100" = "100",
"200" = "200",
"300" = "300",
"400" = "400",
"500" = "500",
"600" = "600",
"700" = "700",
"800" = "800",
"900" = "900",
"1000" = expression(1~0*0*0),
"2000" = expression(2~0*0*0),
"3000" = expression(3~0*0*0),
"4000" = expression(4~0*0*0),
"5000" = expression(5~0*0*0),
"6000" = expression(6~0*0*0),
"7000" = expression(7~0*0*0),
"8000" = expression(8~0*0*0),
"9000" = expression(9~0*0*0),
"10000" = expression(10~0*0*0)
)
)
plt <- plt + ggplot2::theme(legend.position = c(0.07,0.87),
legend.title = ggplot2::element_text(size = 0, face = "bold"), # size = 0 eliminate legend title
legend.text = ggplot2::element_text(size = 5),
legend.background= ggplot2::element_rect(fill= "white", size = 5),  # legend.key does not remove all legend background, only key background
legend.key.width= ggplot2::unit(0.4,"line"),
legend.key.height= ggplot2::unit(0.3,"line")
# legend.key.size = ggplot2::unit(1,"line")
)
plt <- plt + ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=1)))
plt <- plt + ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white"),
panel.grid.major.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.minor.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank())
plt
dev.off()
pdf(file= paste0("~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/",
"mdq_plus_gdr_2018.05.29_fill.pdf"), width = 6, height = 3)
plt <- plt + ggplot2::stat_ydensity(ggplot2::aes(color = tnrs, fill = NA),
scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
dev.off()
rm(plt)
plt
pdf(file= paste0("~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/",
"mdq_plus_gdr_2018.05.29_no_fill.pdf"), width = 6, height = 3)
plt <- ggplot2::ggplot(res_all, ggplot2::aes_string(x = "expr", y = "Time"))
plt <- plt + ggplot2::coord_cartesian(ylim = c(y_min, y_max))
# plt <- plt + ggplot2::stat_ydensity()
# # this plots both at the same time:
plt <- plt + ggplot2::stat_ydensity(ggplot2::aes(color = tnrs, fill = tnrs), scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
# color controls the outer line color; fill control the inside color.
# plt <- plt + ggplot2::geom_violin(ggplot2::aes(fill = tnrs))  # fill = factor(tnrs) if tnrs is not a factor
plt <- plt + ggplot2::scale_color_manual(values = ggplot2::alpha(c("lightblue", "black", "grey"), 0.5)) +  # ggplot2::scale_alpha_discrete("tnrs") +
ggplot2::scale_fill_manual(values = ggplot2::alpha(c("lightblue", "black", "grey"), 0.5))
plt <- plt + ggplot2::theme(axis.text.y = ggplot2::element_text(angle=0, size=7), legend.position = "none")
plt <- plt + ggplot2::scale_y_log10(name="Time (seconds)", breaks=c(1e+03, 1e+04, 3e+04, 6e+04),
labels=c("1e+03"="1 s", "1e+04"="10 s", "3e+04"="30 s", "6e+04"="60 s"),
position="left",
sec.axis = ggplot2::sec_axis(~ . *1, name = "Time (minutes)",
breaks=c(6e+04, 18e+04, 30e+04, 6e+05, 9e+05, 15e+05),
labels=c("6e+04"="1 min", "18e+04"="3 min", "30e+04"="5 min", "6e+05"="10 min", "9e+05"="15 min", "15e+05"="25 min")
)
)
plt <- plt + ggplot2::theme(axis.text.x = ggplot2::element_text(angle=90, hjust=1, size = 7))
plt <- plt + ggplot2::scale_x_discrete(name = "Query Length",
labels=c("10" = "10",
"100" = "100",
"200" = "200",
"300" = "300",
"400" = "400",
"500" = "500",
"600" = "600",
"700" = "700",
"800" = "800",
"900" = "900",
"1000" = expression(1~0*0*0),
"2000" = expression(2~0*0*0),
"3000" = expression(3~0*0*0),
"4000" = expression(4~0*0*0),
"5000" = expression(5~0*0*0),
"6000" = expression(6~0*0*0),
"7000" = expression(7~0*0*0),
"8000" = expression(8~0*0*0),
"9000" = expression(9~0*0*0),
"10000" = expression(10~0*0*0)
)
)
plt <- plt + ggplot2::theme(legend.position = c(0.07,0.87),
legend.title = ggplot2::element_text(size = 0, face = "bold"), # size = 0 eliminate legend title
legend.text = ggplot2::element_text(size = 5),
legend.background= ggplot2::element_rect(fill= "white", size = 5),  # legend.key does not remove all legend background, only key background
legend.key.width= ggplot2::unit(0.4,"line"),
legend.key.height= ggplot2::unit(0.3,"line")
# legend.key.size = ggplot2::unit(1,"line")
)
plt <- plt + ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=1)))
plt <- plt + ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white"),
panel.grid.major.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.minor.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank())
plt
dev.off()
# # # # # # # # # # # # # # # # # # # # # #
pdf(file= paste0("~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/",
"mdq_plus_gdr_2018.05.29_fill.pdf"), width = 6, height = 3)
plt <- plt + ggplot2::stat_ydensity(ggplot2::aes(color = tnrs, fill = NA),
scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
plt
dev.off()
rm(plt)
plt
pdf(file= paste0("~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/",
"mdq_plus_gdr_2018.05.29_fill.pdf"), width = 6, height = 3)
plt <- ggplot2::ggplot(res_all, ggplot2::aes_string(x = "expr", y = "Time"))
plt <- plt + ggplot2::coord_cartesian(ylim = c(y_min, y_max))
# plt <- plt + ggplot2::stat_ydensity()
# # this plots both at the same time:
plt <- plt + ggplot2::stat_ydensity(ggplot2::aes(color = tnrs, fill = tnrs), scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
# color controls the outer line color; fill control the inside color.
# plt <- plt + ggplot2::geom_violin(ggplot2::aes(fill = tnrs))  # fill = factor(tnrs) if tnrs is not a factor
plt <- plt + ggplot2::scale_color_manual(values = ggplot2::alpha(c("lightblue", "black", "grey"), 0.5)) +  # ggplot2::scale_alpha_discrete("tnrs") +
ggplot2::scale_fill_manual(values = ggplot2::alpha(c("lightblue", "black", "grey"), 0.5))
plt <- plt + ggplot2::theme(axis.text.y = ggplot2::element_text(angle=0, size=7), legend.position = "none")
plt <- plt + ggplot2::scale_y_log10(name="Time (seconds)", breaks=c(1e+03, 1e+04, 3e+04, 6e+04),
labels=c("1e+03"="1 s", "1e+04"="10 s", "3e+04"="30 s", "6e+04"="60 s"),
position="left",
sec.axis = ggplot2::sec_axis(~ . *1, name = "Time (minutes)",
breaks=c(6e+04, 18e+04, 30e+04, 6e+05, 9e+05, 15e+05),
labels=c("6e+04"="1 min", "18e+04"="3 min", "30e+04"="5 min", "6e+05"="10 min", "9e+05"="15 min", "15e+05"="25 min")
)
)
plt <- plt + ggplot2::theme(axis.text.x = ggplot2::element_text(angle=90, hjust=1, size = 7))
plt <- plt + ggplot2::scale_x_discrete(name = "Query Length",
labels=c("10" = "10",
"100" = "100",
"200" = "200",
"300" = "300",
"400" = "400",
"500" = "500",
"600" = "600",
"700" = "700",
"800" = "800",
"900" = "900",
"1000" = expression(1~0*0*0),
"2000" = expression(2~0*0*0),
"3000" = expression(3~0*0*0),
"4000" = expression(4~0*0*0),
"5000" = expression(5~0*0*0),
"6000" = expression(6~0*0*0),
"7000" = expression(7~0*0*0),
"8000" = expression(8~0*0*0),
"9000" = expression(9~0*0*0),
"10000" = expression(10~0*0*0)
)
)
plt <- plt + ggplot2::theme(legend.position = c(0.07,0.87),
legend.title = ggplot2::element_text(size = 0, face = "bold"), # size = 0 eliminate legend title
legend.text = ggplot2::element_text(size = 5),
legend.background= ggplot2::element_rect(fill= "white", size = 5),  # legend.key does not remove all legend background, only key background
legend.key.width= ggplot2::unit(0.4,"line"),
legend.key.height= ggplot2::unit(0.3,"line")
# legend.key.size = ggplot2::unit(1,"line")
)
plt <- plt + ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=1)))
plt <- plt + ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white"),
panel.grid.major.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.minor.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank())
plt
dev.off()
# # # # # # # # # # # # # # # # # # # # # #
pdf(file= paste0("~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/",
"mdq_plus_gdr_2018.05.29_no_fill.pdf"), width = 6, height = 3)
plt <- plt + ggplot2::stat_ydensity(ggplot2::aes(color = tnrs, fill = NA),
scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
plt
dev.off()
rm(plt)
plt
pdf(file= paste0("~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/",
"mdq_plus_gdr_2018.05.29_no_fill.pdf"), width = 6, height = 3)
plt <- ggplot2::ggplot(res_all, ggplot2::aes_string(x = "expr", y = "Time"))
plt <- plt + ggplot2::coord_cartesian(ylim = c(y_min, y_max))
# plt <- plt + ggplot2::stat_ydensity()
# # this plots both at the same time:
plt <- plt + ggplot2::stat_ydensity(ggplot2::aes(color = tnrs, fill = NA), scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
# color controls the outer line color; fill control the inside color.
# plt <- plt + ggplot2::geom_violin(ggplot2::aes(fill = tnrs))  # fill = factor(tnrs) if tnrs is not a factor
plt <- plt + ggplot2::scale_color_manual(values = ggplot2::alpha(c("lightblue", "black", "grey"), 0.5)) +  # ggplot2::scale_alpha_discrete("tnrs") +
ggplot2::scale_fill_manual(values = ggplot2::alpha(c("lightblue", "black", "grey"), 0.5))
plt <- plt + ggplot2::theme(axis.text.y = ggplot2::element_text(angle=0, size=7), legend.position = "none")
plt <- plt + ggplot2::scale_y_log10(name="Time (seconds)", breaks=c(1e+03, 1e+04, 3e+04, 6e+04),
labels=c("1e+03"="1 s", "1e+04"="10 s", "3e+04"="30 s", "6e+04"="60 s"),
position="left",
sec.axis = ggplot2::sec_axis(~ . *1, name = "Time (minutes)",
breaks=c(6e+04, 18e+04, 30e+04, 6e+05, 9e+05, 15e+05),
labels=c("6e+04"="1 min", "18e+04"="3 min", "30e+04"="5 min", "6e+05"="10 min", "9e+05"="15 min", "15e+05"="25 min")
)
)
plt <- plt + ggplot2::theme(axis.text.x = ggplot2::element_text(angle=90, hjust=1, size = 7))
plt <- plt + ggplot2::scale_x_discrete(name = "Query Length",
labels=c("10" = "10",
"100" = "100",
"200" = "200",
"300" = "300",
"400" = "400",
"500" = "500",
"600" = "600",
"700" = "700",
"800" = "800",
"900" = "900",
"1000" = expression(1~0*0*0),
"2000" = expression(2~0*0*0),
"3000" = expression(3~0*0*0),
"4000" = expression(4~0*0*0),
"5000" = expression(5~0*0*0),
"6000" = expression(6~0*0*0),
"7000" = expression(7~0*0*0),
"8000" = expression(8~0*0*0),
"9000" = expression(9~0*0*0),
"10000" = expression(10~0*0*0)
)
)
plt <- plt + ggplot2::theme(legend.position = c(0.07,0.87),
legend.title = ggplot2::element_text(size = 0, face = "bold"), # size = 0 eliminate legend title
legend.text = ggplot2::element_text(size = 5),
legend.background= ggplot2::element_rect(fill= "white", size = 5),  # legend.key does not remove all legend background, only key background
legend.key.width= ggplot2::unit(0.4,"line"),
legend.key.height= ggplot2::unit(0.3,"line")
# legend.key.size = ggplot2::unit(1,"line")
)
plt <- plt + ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=1)))
plt <- plt + ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white"),
panel.grid.major.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.minor.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank())
plt
dev.off()
load("/Users/luna/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/3_gbot/gbot_runtime_2018.03.26_5000_10to100_aves_spp.RData")
load("/Users/luna/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/3_gbot/gbot_runtime_2018.03.26_5000_9_aves_spp.RData")
ls()
str(gbot_runtime_2018.03.26_5000_10to100_aves_spp)
str(gbot_runtime_2018.03.26_50009_aves_spp)
gbot_runtime_2018.03.26_50009_aves_spp$time
gbot_runtime_2018.03.26_5000_10to100_aves_spp$time[1]
gbot_runtime_2018.03.26_5000_10to100_aves_spp$time[1:5]
cbind(gbot_runtime_2018.03.26_50009_aves_spp, gbot_runtime_2018.03.26_5000_10to100_aves_spp)
rbind(gbot_runtime_2018.03.26_50009_aves_spp, gbot_runtime_2018.03.26_5000_10to100_aves_spp)
length(10::100)
length(10:100)
length(gbot_runtime_2018.03.26_5000_10to100_aves_spp$time)
gbot_runtime_2018.03.26_5000_10to100_aves_spp[2]
gbot_runtime_2018.03.26_5000_10to100_aves_spp$time <- gbot_runtime_2018.03.26_5000_10to100_aves_spp$time[2:92]
gbot_runtime_2018.03.26_5000_10to100_aves_spp$expr <- gbot_runtime_2018.03.26_5000_10to100_aves_spp$expr[2:92]
str(gbot_runtime_2018.03.26_5000_10to100_aves_spp)
ls(gbot_runtime_2018.03.26_5000_10to100_aves_spp)
x <- vector(mode = "list")
x$time <- gbot_runtime_2018.03.26_5000_10to100_aves_spp$time[2:92]
x$expr <- gbot_runtime_2018.03.26_5000_10to100_aves_spp$expr[2:92]
class(x) <- "microbenchmark"
str(x)
x$expr <- factor(x$expr)
class(x) <- c("microbenchmark", "data.frame")
str(x)
dplyr::bind_rows(gbot_runtime_2018.03.26_50009_aves_spp, x)
gbot_runtime_2018.03.26_5000 <- dplyr::bind_rows(gbot_runtime_2018.03.26_50009_aves_spp, gbot_runtime_2018.03.26_5000_10to100_aves_spp)
gbot_runtime_2018.03.26_5000
str(gbot_runtime_2018.03.26_5000)
save(gbot_runtime_2018.03.26_5000,
file = "~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/3_gbot/gbot_runtime_2018.03.26_5000.RData")
load("/Users/luna/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/3_gbot/gbot_runtime_2018.03.26_6000_58_aves_spp.RData")
load("/Users/luna/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/3_gbot/gbot_runtime_2018.03.26_6000_59to100_aves_spp.RData")
ls()
gbot_runtime_2018.03.26_6000 <- dplyr::bind_rows(gbot_runtime_2018.03.26_6000_58_aves_spp, gbot_runtime_2018.03.26_6000_59to100_aves_spp)
str(gbot_runtime_2018.03.26_6000)
save(gbot_runtime_2018.03.26_6000,
file = "~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/3_gbot/gbot_runtime_2018.03.26_6000.RData")
str(gbot_runtime_2018.03.26_5000)
setwd("~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/3_gbot/")
ninput <- c(10,100,200,300,400,500,600,700,800,900, 1000,2000,3000,4000, 5000, 6000,7000,8000)
res4 <- c()
for(i in ninput){
x <- paste0("gbot_runtime_2018.03.26_",
i, "_aves_spp")
xname <- paste0(x, ".RData")
load(xname)
res4 <- rbind(res4, get(x))
}
ls()
length(res4)
str(res4)
str(res4$expr)
length(ninput)
gbot_runtime_2018.03.26_5000_aves_spp <- dplyr::bind_rows(gbot_runtime_2018.03.26_50009_aves_spp, gbot_runtime_2018.03.26_5000_10to100_aves_spp)
str(gbot_runtime_2018.03.26_5000)
save(gbot_runtime_2018.03.26_5000_aves_spp,
file = "~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/3_gbot/gbot_runtime_2018.03.26_5000_aves_spp.RData")
gbot_runtime_2018.03.26_6000_aves_spp <- dplyr::bind_rows(gbot_runtime_2018.03.26_6000_58_aves_spp, gbot_runtime_2018.03.26_6000_59to100_aves_spp)
str(gbot_runtime_2018.03.26_6000)
save(gbot_runtime_2018.03.26_6000_aves_spp,
file = "~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/3_gbot/gbot_runtime_2018.03.26_6000_aves_spp.RData")
setwd("~/Google Drive/datelife/runtime_tests/2_tests/2_random_spp_names/3_gbot/")
ninput <- c(10,100,200,300,400,500,600,700,800,900, 1000,2000,3000,4000, 5000, 6000,7000,8000)
length(ninput)
res4 <- c()
for(i in ninput){
x <- paste0("gbot_runtime_2018.03.26_",
i, "_aves_spp")
xname <- paste0(x, ".RData")
load(xname)
res4 <- rbind(res4, get(x))
}
ninput <- c(10,100,200,300,400,500,600,700,800,900, 1000,2000,3000,4000, 5000, 6000,7000)
ninput <- c(10,100,200,300,400,500,600,700,800,900, 1000,2000,3000,4000, 5000, 6000,7000)
length(ninput)
res4 <- c()
for(i in ninput){
x <- paste0("gbot_runtime_2018.03.26_",
i, "_aves_spp")
xname <- paste0(x, ".RData")
load(xname)
res4 <- rbind(res4, get(x))
}
load("gbot_runtime_2018.03.26_8000_64_aves_spp.RData")
ls()
res4 <- rbind(res4, gbot_runtime_2018.03.26_8000_64_aves_spp)
ls()
length(res4)
str(res4)
str(res4$expr)
ggplot2::autoplot(res4)
plt <- ggplot2::ggplot(res4, ggplot2::aes_string(x = "expr", y = "Time"))
plt <- plt + ggplot2::coord_cartesian(ylim = c(y_min, y_max))
plt <- plt + ggplot2::stat_ydensity(ggplot2::aes(color = tnrs, fill = NA), scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
plt <- plt + ggplot2::scale_color_manual(values = ggplot2::alpha(c("grey"), 0.5)) +  # ggplot2::scale_alpha_discrete("tnrs") +
ggplot2::scale_fill_manual(values = ggplot2::alpha(c("grey"), 0.5))
plt <- plt + ggplot2::theme(axis.text.y = ggplot2::element_text(angle=0, size=7), legend.position = "none")
plt <- plt + ggplot2::scale_y_log10(name="Time (seconds)", breaks=c(1e+03, 1e+04, 3e+04, 6e+04),
labels=c("1e+03"="1 s", "1e+04"="10 s", "3e+04"="30 s", "6e+04"="60 s"),
position="left",
sec.axis = ggplot2::sec_axis(~ . *1, name = "Time (minutes)",
breaks=c(6e+04, 18e+04, 30e+04, 6e+05, 9e+05, 15e+05),
labels=c("6e+04"="1 min", "18e+04"="3 min", "30e+04"="5 min", "6e+05"="10 min", "9e+05"="15 min", "15e+05"="25 min")
)
)
plt <- plt + ggplot2::theme(axis.text.x = ggplot2::element_text(angle=90, hjust=1, size = 7))
plt <- plt + ggplot2::scale_x_discrete(name = "Query Length",
labels=c("10" = "10",
"100" = "100",
"200" = "200",
"300" = "300",
"400" = "400",
"500" = "500",
"600" = "600",
"700" = "700",
"800" = "800",
"900" = "900",
"1000" = expression(1~0*0*0),
"2000" = expression(2~0*0*0),
"3000" = expression(3~0*0*0),
"4000" = expression(4~0*0*0),
"5000" = expression(5~0*0*0),
"6000" = expression(6~0*0*0),
"7000" = expression(7~0*0*0),
"8000" = expression(8~0*0*0)
)
)
plt <- plt + ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=1)))
plt <- plt + ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white"),
panel.grid.major.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.minor.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank())
plt
plt <- plt + ggplot2::stat_ydensity(scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
rm(plt)
plt <- ggplot2::ggplot(res4, ggplot2::aes_string(x = "expr", y = "Time"))
plt <- plt + ggplot2::coord_cartesian(ylim = c(y_min, y_max))
# plt <- plt + ggplot2::stat_ydensity()
# # this plots both at the same time:
plt <- plt + ggplot2::stat_ydensity(scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
# color controls the outer line color; fill control the inside color.
# plt <- plt + ggplot2::geom_violin(ggplot2::aes(fill = tnrs))  # fill = factor(tnrs) if tnrs is not a factor
plt <- plt + ggplot2::scale_color_manual(values = ggplot2::alpha(c("grey"), 0.5)) +  # ggplot2::scale_alpha_discrete("tnrs") +
ggplot2::scale_fill_manual(values = ggplot2::alpha(c("grey"), 0.5))
plt <- plt + ggplot2::theme(axis.text.y = ggplot2::element_text(angle=0, size=7), legend.position = "none")
plt <- plt + ggplot2::scale_y_log10(name="Time (seconds)", breaks=c(1e+03, 1e+04, 3e+04, 6e+04),
labels=c("1e+03"="1 s", "1e+04"="10 s", "3e+04"="30 s", "6e+04"="60 s"),
position="left",
sec.axis = ggplot2::sec_axis(~ . *1, name = "Time (minutes)",
breaks=c(6e+04, 18e+04, 30e+04, 6e+05, 9e+05, 15e+05),
labels=c("6e+04"="1 min", "18e+04"="3 min", "30e+04"="5 min", "6e+05"="10 min", "9e+05"="15 min", "15e+05"="25 min")
)
)
plt <- plt + ggplot2::theme(axis.text.x = ggplot2::element_text(angle=90, hjust=1, size = 7))
plt <- plt + ggplot2::scale_x_discrete(name = "Query Length",
labels=c("10" = "10",
"100" = "100",
"200" = "200",
"300" = "300",
"400" = "400",
"500" = "500",
"600" = "600",
"700" = "700",
"800" = "800",
"900" = "900",
"1000" = expression(1~0*0*0),
"2000" = expression(2~0*0*0),
"3000" = expression(3~0*0*0),
"4000" = expression(4~0*0*0),
"5000" = expression(5~0*0*0),
"6000" = expression(6~0*0*0),
"7000" = expression(7~0*0*0),
"8000" = expression(8~0*0*0)
)
)
plt <- plt + ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=1)))
plt <- plt + ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white"),
panel.grid.major.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.minor.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank())
plt
res4$Time <- microbenchmark:::convert_to_unit(res4$time, "t")  #changing the name of the element itself is the easiest way to make it appear as axis label
rm(plt)
plt <- ggplot2::ggplot(res4, ggplot2::aes_string(x = "expr", y = "Time"))
plt <- plt + ggplot2::coord_cartesian(ylim = c(y_min, y_max))
# plt <- plt + ggplot2::stat_ydensity()
# # this plots both at the same time:
plt <- plt + ggplot2::stat_ydensity(scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
# color controls the outer line color; fill control the inside color.
plt <- plt + ggplot2::scale_color_manual(values = ggplot2::alpha(c("grey"), 0.5)) +
ggplot2::scale_fill_manual(values = ggplot2::alpha(c("grey"), 0.5))
plt <- plt + ggplot2::theme(axis.text.y = ggplot2::element_text(angle=0, size=7), legend.position = "none")
plt <- plt + ggplot2::scale_y_log10(name="Time (seconds)", breaks=c(1e+03, 1e+04, 3e+04, 6e+04),
labels=c("1e+03"="1 s", "1e+04"="10 s", "3e+04"="30 s", "6e+04"="60 s"),
position="left",
sec.axis = ggplot2::sec_axis(~ . *1, name = "Time (minutes)",
breaks=c(6e+04, 18e+04, 30e+04, 6e+05, 9e+05, 15e+05),
labels=c("6e+04"="1 min", "18e+04"="3 min", "30e+04"="5 min", "6e+05"="10 min", "9e+05"="15 min", "15e+05"="25 min")
)
)
plt <- plt + ggplot2::theme(axis.text.x = ggplot2::element_text(angle=90, hjust=1, size = 7))
plt <- plt + ggplot2::scale_x_discrete(name = "Query Length",
labels=c("10" = "10",
"100" = "100",
"200" = "200",
"300" = "300",
"400" = "400",
"500" = "500",
"600" = "600",
"700" = "700",
"800" = "800",
"900" = "900",
"1000" = expression(1~0*0*0),
"2000" = expression(2~0*0*0),
"3000" = expression(3~0*0*0),
"4000" = expression(4~0*0*0),
"5000" = expression(5~0*0*0),
"6000" = expression(6~0*0*0),
"7000" = expression(7~0*0*0),
"8000" = expression(8~0*0*0)
)
)
plt <- plt + ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=1)))
plt <- plt + ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white"),
panel.grid.major.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.minor.y = ggplot2::element_line(color = "grey95", linetype = "solid"),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank())
plt
rm(plt)
plt <- ggplot2::ggplot(res4, ggplot2::aes_string(x = "expr", y = "Time"))
plt <- plt + ggplot2::coord_cartesian(ylim = c(y_min, y_max))
plt
plt <- plt + ggplot2::stat_ydensity(scale = "width", width = 0.5, position = "identity")  # this and follow line work the same
plt
plt <- plt + ggplot2::scale_color_manual(values = ggplot2::alpha(c("grey"), 0.5)) +
ggplot2::scale_fill_manual(values = ggplot2::alpha(c("grey"), 0.5))
plt
plt <- plt + ggplot2::theme(axis.text.y = ggplot2::element_text(angle=0, size=7), legend.position = "none")
plt
